<?php

/**
 * AbstractGamemasterApi
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * GameConSuite Admin API
 *
 * This is the administrative API for GameConSuite.  You can find out more about Game Con Suite at  [https://gameconsuite.com](https://gameconsuite.com)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;


use OpenAPIServer\Repository\MemberRepository;
use OpenAPIServer\Repository\EventRepository;

use PHPAuth\Auth as PHPAuth;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;

/**
 * AbstractGamemasterApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class GamemasterApi extends AbstractGamemasterApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * @var PHPAuth|null Slim app container instance
     */
    protected $auth;

    /**
     * @var \Associates|null Slim app container instance
     */
    protected $associates;

    /**
     * @var MemberRepository|null Member Repository for retrieving envelops
     */
    protected $memberRepository;

    /**
     * @var EventRepository|null Member Repository for retrieving envelops
     */
    protected $eventRepo;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(PHPAuth $auth, \Associates $associates, MemberRepository $memberRepository, EventRepository $eventRepo)
    {
        $this->auth = $auth;
        $this->associates = $associates;
        $this->memberRepository = $memberRepository;
        $this->eventRepo = $eventRepo;
    }


    /**
     * POST submitGMEventsByMember
     * Summary: Submit an event for the specified member
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */








    /**
     * GET getGMEvent
     * Summary: Find event by ID
     * Notes: Returns a single event
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getGMEvent(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $memberId = $args['memberId'];
        $eventId = $args['eventId'];

        if (!$this->auth->isLogged()) {
            $response->getBody()->write('Unauthorized');
            return $response->withStatus(401);
        }

        // get logged in user
        $userId = $this->auth->getCurrentUser()['uid'];

        // test the the member is listed in the associates
        $members = $this->associates->listAssociates($userId);
        // echo print_r($members, 1)."\n\n";
        if (!isset($members[$memberId])) {
            $response->getBody()->write('Unauthorized');
            return $response->withStatus(401);
        }

        // test the event belongs to the gamemaster
        try {
            $event = $this->eventRepo->findById($eventId);
        } catch (\OutOfBoundsException $e) {
            $response->getBody()->write( "Not found" );
            return $response->withStatus(404);
        }

        if ($event->gm->id != $memberId) {
            $response->getBody()->write('Unauthorized '.print_r($event->gm,1));
            return $response->withStatus(401);
        }

        // TODO limit response to information available to GMs

        $response->getBody()->write( json_encode($event) );
        return $response->withStatus(200)->withHeader('Content-type', 'application/json');
    }


    /**
     * PATCH updateGMEvent
     * Summary: Send allowed modifications for the specified event
     * Notes: Gamemasters of the event may modify VTT information after submission
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function updateGMEvent(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $memberId = $args['memberId'];
        $eventId = $args['eventId'];
        $body = $request->getParsedBody();

        if (isset($body) == 0) {
            $response->getBody()->write("Body and Content-type header required");
            return $response->withStatus(400);
        }

        if (!$this->auth->isLogged()) {
            $response->getBody()->write('Unauthorized');
            return $response->withStatus(401);
        }

        // get logged in user
        $userId = $this->auth->getCurrentUser()['uid'];

        // test the the member is listed in the associates
        $members = $this->associates->listAssociates($userId);
        // echo print_r($members, 1)."\n\n";
        if (!isset($members[$memberId])) {
            $response->getBody()->write('Unauthorized');
            return $response->withStatus(401);
        }

        // test the event belongs to the gamemaster
        try {
            $event = $this->eventRepo->findById($eventId);
        } catch (\OutOfBoundsException $e) {
            $response->getBody()->write( "Not found" );
            return $response->withStatus(404);
        }

        if ($event->gm->id != $memberId) {
            $response->getBody()->write('Unauthorized '.print_r($event->gm,1));
            return $response->withStatus(401);
        }

        $event->vttLink = $body['vttLink'];
        $event->vttInfo = $body['vttInfo'];

        // TODO VALIDATE VTT info!!!

        // save only the VTT information
        $this->eventRepo->saveEventVTT($event);

        $response = $response->withHeader('Content-type', 'application/json');
        $response->getBody()->write(json_encode($event));
        return $response->withStatus(200);
    }
}
