<?php

/**
 * GameConSuite Admin API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is the administrative API for GameConSuite.  You can find out more about Game Con Suite at  [https://gameconsuite.org](https://gameconsuite.org)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractEventApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractEventApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * POST addEvent
     * Summary: Add a new event to the convention
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addEvent(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $body = $request->getParsedBody();
        $message = "How about implementing addEvent as a POST method in OpenAPIServer\Api\EventApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT cancelEvent
     * Summary: Cancel an existing event
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function cancelEvent(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $eventId = $args['eventId'];
        $message = "How about implementing cancelEvent as a PUT method in OpenAPIServer\Api\EventApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * DELETE deleteEvent
     * Summary: Deletes an event
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function deleteEvent(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('api_key') ? $headers['api_key'] : null;
        $eventId = $args['eventId'];
        $message = "How about implementing deleteEvent as a DELETE method in OpenAPIServer\Api\EventApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getEventById
     * Summary: Find event by ID
     * Notes: Returns a single event
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getEventById(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $eventId = $args['eventId'];
        $message = "How about implementing getEventById as a GET method in OpenAPIServer\Api\EventApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT updateEvent
     * Summary: Update an existing event
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function updateEvent(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $eventId = $args['eventId'];
        $body = $request->getParsedBody();
        $message = "How about implementing updateEvent as a PUT method in OpenAPIServer\Api\EventApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST updateEventWithForm
     * Summary: Updates an event in the convention with form data
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function updateEventWithForm(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $eventId = $args['eventId'];
        $body = $request->getParsedBody();
        $name = (isset($body['name'])) ? $body['name'] : null;
        $status = (isset($body['status'])) ? $body['status'] : null;
        $message = "How about implementing updateEventWithForm as a POST method in OpenAPIServer\Api\EventApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
