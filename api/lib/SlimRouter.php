<?php

/**
 * SlimRouter
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * GameConSuite Admin API
 *
 * This is the administrative API for GameConSuite.  You can find out more about Game Con Suite at  [https://gameconsuite.com](https://gameconsuite.com)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use Slim\Factory\AppFactory;
use Slim\Interfaces\RouteInterface;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ServerRequestInterface;
use OpenAPIServer\Middleware\JsonBodyParserMiddleware;
use OpenAPIServer\Mock\OpenApiDataMocker;
use OpenAPIServer\Mock\OpenApiDataMockerMiddleware;
use Exception;

/**
 * SlimRouter Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /** @var App instance */
    private $slimApp;

    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'createUserEnvelope',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/MemberPrivate"
      }
    }
  }
}',
                ],
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'getUserEnvelopes',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'A list of envelopes',
                    'jsonSchema' => '{
  "description" : "A list of envelopes",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/MemberPrivate"
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/tickets',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'getUserTickets',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'A list of envelopes with additional ticket information',
                    'jsonSchema' => '{
  "description" : "A list of envelopes with additional ticket information",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "allOf" : [ {
            "$ref" : "#/components/schemas/MemberPrivate"
          }, {
            "type" : "object",
            "properties" : {
              "tickets" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CartItem"
                }
              }
            }
          } ]
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/cart',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'addItemToCart',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid Cart Item',
                    'jsonSchema' => '{
  "description" : "Invalid Cart Item",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/CartItem"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'editEnvelopeByMember',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Malformed body',
                    'jsonSchema' => '{
  "description" : "Malformed body",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/MemberPrivate"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/MemberPrivate"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/authorization',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'getAuthorizationByMember',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Authorization"
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/cart',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'getCartByMember',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Cart"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'getEnvelopeByMember',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/MemberPrivate"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/MemberPrivate"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/schedule',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'getScheduleByMember',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Retrieved successfully',
                    'jsonSchema' => '{
  "description" : "Retrieved successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ScheduleItem"
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/cart/{itemId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'removeItemFromCart',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Item not found',
                    'jsonSchema' => '{
  "description" : "Item not found",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Cart"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/cart/{itemId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'updateItemFromCart',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Item not found',
                    'jsonSchema' => '{
  "description" : "Item not found",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/CartItem"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAttendeeApi',
            'userClassname' => 'AttendeeApi',
            'operationId' => 'userEnvelopeMemberIdDelete',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Deleted successfully',
                    'jsonSchema' => '{
  "description" : "Deleted successfully"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/token',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAuthenticationApi',
            'userClassname' => 'AuthenticationApi',
            'operationId' => 'getToken',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'token',
                    'jsonSchema' => '{
  "description" : "token",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "string",
        "example" : "123456789abcdef"
      }
    }
  }
}',
                ],
                '401' => [
                    'code' => 401,
                    'message' => 'Invalid credentials',
                    'jsonSchema' => '{
  "description" : "Invalid credentials",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/user/login',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAuthenticationApi',
            'userClassname' => 'AuthenticationApi',
            'operationId' => 'login',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Invalid credentials',
                    'jsonSchema' => '{
  "description" : "Invalid credentials",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/user/logout',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAuthenticationApi',
            'userClassname' => 'AuthenticationApi',
            'operationId' => 'logout',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/event',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEventApi',
            'userClassname' => 'EventApi',
            'operationId' => 'addEvent',
            'responses' => [
                '405' => [
                    'code' => 405,
                    'message' => 'Invalid input',
                    'jsonSchema' => '{
  "description" : "Invalid input",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/event',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEventApi',
            'userClassname' => 'EventApi',
            'operationId' => 'updateEvent',
            'responses' => [
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Event not found',
                    'jsonSchema' => '{
  "description" : "Event not found",
  "content" : { }
}',
                ],
                '405' => [
                    'code' => 405,
                    'message' => 'Validation exception',
                    'jsonSchema' => '{
  "description" : "Validation exception",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/event/{eventId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEventApi',
            'userClassname' => 'EventApi',
            'operationId' => 'deleteEvent',
            'responses' => [
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Event not found',
                    'jsonSchema' => '{
  "description" : "Event not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/event/{eventId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEventApi',
            'userClassname' => 'EventApi',
            'operationId' => 'getEventById',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/EventAdmin"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/EventAdmin"
      }
    }
  }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Event not found',
                    'jsonSchema' => '{
  "description" : "Event not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/event/{eventId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEventApi',
            'userClassname' => 'EventApi',
            'operationId' => 'updateEventWithForm',
            'responses' => [
                '405' => [
                    'code' => 405,
                    'message' => 'Invalid input',
                    'jsonSchema' => '{
  "description" : "Invalid input",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/event/{eventId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGamemasterApi',
            'userClassname' => 'GamemasterApi',
            'operationId' => 'getGMEvent',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/Event"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Event"
      }
    }
  }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Event not found',
                    'jsonSchema' => '{
  "description" : "Event not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/event',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGamemasterApi',
            'userClassname' => 'GamemasterApi',
            'operationId' => 'getGMEventsByMember',
            'responses' => [
                '401' => [
                    'code' => 401,
                    'message' => 'Not logged in',
                    'jsonSchema' => '{
  "description" : "Not logged in",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Unauthorized to access the specified envelope',
                    'jsonSchema' => '{
  "description" : "Unauthorized to access the specified envelope",
  "content" : { }
}',
                ],
                'default' => [
                    'code' => 200,
                    'message' => 'Created successfully',
                    'jsonSchema' => '{
  "description" : "Created successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Event"
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/user/gmSubmission/{memberId}/finalize',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGamemasterApi',
            'userClassname' => 'GamemasterApi',
            'operationId' => 'submitGMEventsByMember',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Operation succeeded',
                    'jsonSchema' => '{
  "description" : "Operation succeeded",
  "content" : { }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Event not found',
                    'jsonSchema' => '{
  "description" : "Event not found",
  "content" : { }
}',
                ],
                '405' => [
                    'code' => 405,
                    'message' => 'Validation exception',
                    'jsonSchema' => '{
  "description" : "Validation exception",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '',
            'path' => '/user/envelope/{memberId}/event/{eventId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGamemasterApi',
            'userClassname' => 'GamemasterApi',
            'operationId' => 'updateGMEvent',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Operation succeeded',
                    'jsonSchema' => '{
  "description" : "Operation succeeded",
  "content" : { }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid request',
                    'jsonSchema' => '{
  "description" : "Invalid request",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Event not found',
                    'jsonSchema' => '{
  "description" : "Event not found",
  "content" : { }
}',
                ],
                '405' => [
                    'code' => 405,
                    'message' => 'Validation exception',
                    'jsonSchema' => '{
  "description" : "Validation exception",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/member',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMemberApi',
            'userClassname' => 'MemberApi',
            'operationId' => 'createMember',
            'responses' => [
                'default' => [
                    'code' => 0,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/member/{memberId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMemberApi',
            'userClassname' => 'MemberApi',
            'operationId' => 'deleteMember',
            'responses' => [
                '405' => [
                    'code' => 405,
                    'message' => 'Invalid input',
                    'jsonSchema' => '{
  "description" : "Invalid input",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/member/{memberId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMemberApi',
            'userClassname' => 'MemberApi',
            'operationId' => 'updateMember',
            'responses' => [
                'default' => [
                    'code' => 0,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/member/{memberId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMemberApi',
            'userClassname' => 'MemberApi',
            'operationId' => 'updateMemberWithForm',
            'responses' => [
                '405' => [
                    'code' => 405,
                    'message' => 'Invalid input',
                    'jsonSchema' => '{
  "description" : "Invalid input",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/public/event',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPublicApi',
            'userClassname' => 'PublicApi',
            'operationId' => 'getFilteredEvents',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Event"
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Event not found',
                    'jsonSchema' => '{
  "description" : "Event not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/public/event/{eventId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPublicApi',
            'userClassname' => 'PublicApi',
            'operationId' => 'getPublicEventById',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/Event"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Event"
      }
    }
  }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Event not found',
                    'jsonSchema' => '{
  "description" : "Event not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/system/constants/events',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractSystemApi',
            'userClassname' => 'SystemApi',
            'operationId' => 'getEventsConstants',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_200"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/user',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'createUser',
            'responses' => [
                'default' => [
                    'code' => 0,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/user/{username}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'deleteUser',
            'responses' => [
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid username supplied',
                    'jsonSchema' => '{
  "description" : "Invalid username supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'User not found',
                    'jsonSchema' => '{
  "description" : "User not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/user/{username}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'getUserByName',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/User"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/User"
      }
    }
  }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid username supplied',
                    'jsonSchema' => '{
  "description" : "Invalid username supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'User not found',
                    'jsonSchema' => '{
  "description" : "User not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/user/{username}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'updateUser',
            'responses' => [
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid user supplied',
                    'jsonSchema' => '{
  "description" : "Invalid user supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'User not found',
                    'jsonSchema' => '{
  "description" : "User not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
    ];

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $settings Either a ContainerInterface or an associative array of app settings
     *
     * @throws Exception When implementation class doesn't exists
     */
    public function __construct($settings = [])
    {
        if ($settings instanceof ContainerInterface) {
            // Set container to create App with on AppFactory
            AppFactory::setContainer($settings);
        }
        $this->slimApp = AppFactory::create();

        // middlewares requires Psr\Container\ContainerInterface
        $container = $this->slimApp->getContainer();

        $authPackage = 'OpenAPIServer\Auth';
        $basicAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\BasicAuthenticator?";
            throw new Exception($message);
        };
        $apiKeyAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\ApiKeyAuthenticator?";
            throw new Exception($message);
        };
        $oAuthAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\OAuthAuthenticator?";
            throw new Exception($message);
        };

        $userOptions = $this->getSetting($settings, 'tokenAuthenticationOptions', null);

        // mocker options
        $mockerOptions = $this->getSetting($settings, 'mockerOptions', null);
        $dataMocker = $mockerOptions['dataMocker'] ?? new OpenApiDataMocker();
        $getMockResponseCallback = $mockerOptions['getMockResponseCallback'] ?? null;
        $mockAfterCallback = $mockerOptions['afterCallback'] ?? null;

        foreach ($this->operations as $operation) {
            $callback = function ($request, $response, $arguments) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new Exception($message);
                $response->getBody()->write($message);
                return $response->withStatus(501);
            };
            $middlewares = [new JsonBodyParserMiddleware()];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                $callback = "\\{$operation['apiPackage']}\\{$operation['userClassname']}:{$operation['operationId']}";
            }

            foreach ($operation['authMethods'] as $authMethod) {
                switch ($authMethod['type']) {
                    case 'http':
                        $authenticatorClassname = "\\{$authPackage}\\BasicAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $basicAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $basicAuthenticator,
                            'regex' => $authMethod['isBearer'] ? '/Bearer\s+(.*)$/i' : '/Basic\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'apiKey':
                        $authenticatorClassname = "\\{$authPackage}\\ApiKeyAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $apiKeyAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $apiKeyAuthenticator,
                            'regex' => '/^(.*)$/i',
                            'header' => $authMethod['isKeyInHeader'] ? $authMethod['keyParamName'] : null,
                            'parameter' => $authMethod['isKeyInQuery'] ? $authMethod['keyParamName'] : null,
                            'cookie' => $authMethod['isKeyInCookie'] ? $authMethod['keyParamName'] : null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'oauth2':
                        $authenticatorClassname = "\\{$authPackage}\\OAuthAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $oAuthAuthenticator = new $authenticatorClassname($container, $authMethod['scopes']);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $oAuthAuthenticator,
                            'regex' => '/Bearer\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    default:
                        throw new Exception('Unknown authorization schema type');
                }
            }

            if (is_callable($getMockResponseCallback)) {
                $middlewares[] = new OpenApiDataMockerMiddleware($dataMocker, $operation['responses'], $getMockResponseCallback, $mockAfterCallback);
            }

            $this->addRoute(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback,
                $middlewares
            )->setName($operation['operationId']);
        }
    }

    /**
     * Merges user defined options with dynamic params
     *
     * @param array $staticOptions Required static options
     * @param array $userOptions   User options
     *
     * @return array Merged array
     */
    private function getTokenAuthenticationOptions(array $staticOptions, array $userOptions = null)
    {
        if (is_array($userOptions) === false) {
            return $staticOptions;
        }

        return array_merge($userOptions, $staticOptions);
    }

    /**
     * Returns app setting by name.
     *
     * @param ContainerInterface|array $settings    Either a ContainerInterface or an associative array of app settings
     * @param string                   $settingName Setting name
     * @param mixed                    $default     Default setting value.
     *
     * @return mixed
     */
    private function getSetting($settings, $settingName, $default = null)
    {
        if ($settings instanceof ContainerInterface && $settings->has($settingName)) {
            return $settings->get($settingName);
        } elseif (is_array($settings) && array_key_exists($settingName, $settings)) {
            return $settings[$settingName];
        }

        return $default;
    }

    /**
     * Add route with multiple methods
     *
     * @param string[]        $methods     Numeric array of HTTP method names
     * @param string          $pattern     The route URI pattern
     * @param callable|string $callable    The route callback routine
     * @param array|null      $middlewares List of middlewares
     *
     * @return RouteInterface
     *
     * @throws InvalidArgumentException If the route pattern isn't a string
     */
    public function addRoute(array $methods, string $pattern, $callable, $middlewares = [])
    {
        $route = $this->slimApp->map($methods, $pattern, $callable);
        foreach ($middlewares as $middleware) {
            $route->add($middleware);
        }
        return $route;
    }

    /**
     * Returns Slim Framework instance
     *
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
