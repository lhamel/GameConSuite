<?php

/**
 * GameConSuite Admin API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is the administrative API for GameConSuite.  You can find out more about Game Con Suite at  [https://gameconsuite.org](https://gameconsuite.org)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

use Psr\Container\ContainerInterface;
/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 */

use PHPAuth\Auth as PHPAuth;
require_once __DIR__ . '/vendor/autoload.php';

use OpenAPIServer\SlimRouter;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPIServer\Mock\OpenApiDataMocker;


$dbSettings = [
    'host' => 'localhost',
    'dbname' => 'ucon_db',
    'user' => 'root',
    'pass' => ''
];


require_once __DIR__.'/../inc/db/db.php';
require_once __DIR__.'/../inc/auth.php';

$containerBuilder = new \DI\ContainerBuilder();

$containerBuilder->addDefinitions([
        'settings' => [
            'db'=>$dbSettings,
            // 'displayErrorDetails' => true, // Should be set to false in production
            // 'logger' => [
            //     'name' => 'my-app',
            //     'path' => 'php://stderr',
            //     'level' => Logger::DEBUG,
            // ],
        ],
        'config' => $GLOBALS['config'],
        \ADOConnection::class => function(DI\Container $c) {
            return $GLOBALS['db'];
        },
        PHPAuth::class=> $auth,
        \Associates::class=>$associates,
]);

//echo "<pre>".print_r($containerBuilder->build(), 1)."</pre>";
$container = $containerBuilder->build();
$router = new SlimRouter($container);

$app = $router->getSlimApp();
$app->setBasePath('/GameConSuite/api');


/**
 * Ensure that the API is not cached by attaching headers to all responses
 */
$app->add(function ($request, $handler) {
    $response = $handler->handle($request);
    return $response
            ->withHeader("Cache-Control", "no-cache, no-store, must-revalidate") // HTTP 1.1.
            ->withHeader("Pragma", "no-cache") // HTTP 1.0.
            ->withHeader("Expires", "0"); // Proxies.
            //->withHeader('Access-Control-Allow-Origin', 'http://mysite')
            //->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')
            //->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
});

/**
 * The routing middleware should be added before the ErrorMiddleware
 * Otherwise exceptions thrown from it will not be handled
 */
$app->addRoutingMiddleware();

/**
 * Add Error Handling Middleware
 *
 * @param bool $displayErrorDetails -> Should be set to false in production
 * @param bool $logErrors -> Parameter is passed to the default ErrorHandler
 * @param bool $logErrorDetails -> Display error details in error log
 * which can be replaced by a callable of your choice.

 * Note: This middleware should be added last. It will not handle any exceptions/errors
 * for middleware added after it.
 */
$app->addErrorMiddleware(
    $config['slimSettings']['displayErrorDetails'] ?? true,
    $config['slimSettings']['logErrors'] ?? true,
    $config['slimSettings']['logErrorDetails'] ?? true
);

$app->run();
