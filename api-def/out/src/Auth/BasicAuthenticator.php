<?php

/**
 * AbstractAuthenticator
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * GameConSuite Admin API
 *
 * This is the administrative API for GameConSuite.  You can find out more about Game Con Suite at  [https://gameconsuite.com](https://gameconsuite.com)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Auth;

use PHPAuth\Auth as PHPAuth;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Dyorg\TokenAuthentication\Exceptions\UnauthorizedException;

/**
 * AbstractAuthenticator Class Doc Comment
 *
 * @package OpenAPIServer\Auth
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class BasicAuthenticator extends AbstractAuthenticator
{

    /**
     * @var Auth|null Member Repository for retrieving envelops
     */
    protected $auth;

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * @var string[]|null List of required scopes
     */
    protected $requiredScope;


    /**
     * Authenticator constructor
     *
     * @param ContainerInterface|null $container     Slim app container instance
     * @param string[]|null           $requiredScope List of required scopes
     */
    public function __construct(ContainerInterface $container = null, $requiredScope = null)
    {
        $this->container = $container;
        $this->requiredScope = $requiredScope;

        if ($this->container == null) {
            throw new \Exception("bad wiring: container is null");
        }

        $this->auth = $container->get(PHPAuth::class);

        if ($this->auth == null) {
            throw new \Exception("bad wiring: auth is null");
        }

        // throw new \Exception("hey over here!");

    }


    /**
     * Verify if token is valid on database
     * If token isn't valid, expired or has insufficient scope must throw an UnauthorizedExceptionInterface
     *
     * @param string $token Api Key
     *
     * @return array User object or associative array
     * @throws UnauthorizedExceptionInterface on invalid token
     */
    protected function getUserByToken(string $token) {
        if (!$this->auth->checkSession($token)) {
            throw new UnauthorizedException("Invalid token");
        }
        return $this->auth->getCurrentUser();
    }

//     /**
//      * Makes the api key validation of your application
//      *
//      * Just an example of implementation. Override this method to fit your needs
//      *
//      * @param ServerRequestInterface $request     HTTP request
//      * @param TokenSearch            $tokenSearch Middleware instance which contains api key in token
//      *
//      * @return bool Must return either true or false
//      * @throws UnauthorizedExceptionInterface when cannot parse token
//      */
//     public function __invoke(ServerRequestInterface &$request, TokenSearch $tokenSearch)
//     {


// echo "__invoke";

// throw new \Exception("hey over here!");

// return false;

//        /**
//         * Try find authorization token via header, parameters, cookie or attribute
//         * If token not found, return response with status 401 (unauthorized)
//         */
//         $token = $tokenSearch->getToken($request);

//         /**
//          * Verify if token is valid on database
//          * If token isn't valid, expired or has insufficient scope must throw an UnauthorizedExceptionInterface
//          */
//         $user = $this->getUserByToken($token);

//         /**
//          * Set authenticated user at attributes
//          */
//         $request = $request->withAttribute('authenticated_user', $user);

//         return true;
//     }
}
