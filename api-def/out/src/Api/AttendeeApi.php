<?php

/**
 * AbstractAttendeeApi
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * GameConSuite Admin API
 *
 * This is the administrative API for GameConSuite.  You can find out more about Game Con Suite at  [https://gameconsuite.com](https://gameconsuite.com)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use OpenAPIServer\Repository\MemberRepository;

use PHPAuth\Auth as PHPAuth;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;

/**
 * AbstractAttendeeApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class AttendeeApi extends AbstractAttendeeApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * @var PHPAuth|null Slim app container instance
     */
    protected $auth;

    /**
     * @var \Associates|null Slim app container instance
     */
    protected $associates;

    /**
     * @var MemberRepository|null Member Repository for retrieving envelops
     */
    protected $memberRepository;


    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(PHPAuth $auth, \Associates $associates, MemberRepository $memberRepository, ContainerInterface $container = null)
    {
        $this->auth = $auth;
        $this->associates = $associates;
        $this->memberRepository = $memberRepository;
        $this->container = $container;
    }


    /**
     * POST createUserEnvelope
     * Summary: Create envelope
     * Notes: create an envelope for current user
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function createUserEnvelope(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $userId = $this->auth->getCurrentUser()['uid'];

        // TODO check the user's authorizations
        $members = $associates->listAssociates($uid);


        $response->getBody()->write(json_encode($members));
        return $response->withStatus(200);



        $message = "How about implementing createUserEnvelope as a POST method in OpenAPIServer\Api\AttendeeApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET getUserEnvelopes
     * Summary: Get list of attendees envelopes
     * Notes: Get list of attendees envelopes
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getUserEnvelopes(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $userId = $this->auth->getCurrentUser()['uid'];

        // TODO check the user's authorizations
        $members = $this->associates->listAssociates($userId);

        // TODO pull the members from the Member repository

        $response->getBody()->write(json_encode($members));
        return $response->withStatus(200);


        $message = "How about implementing getUserEnvelopes as a GET method in OpenAPIServer\Api\AttendeeApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }
}
